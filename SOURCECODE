using System.Collections;
using System.Data;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;

public class MainMenu : MonoBehaviour
{
    public GameObject cirlce, square, circlecolor, winline, winline2, winline3, winline4;
    public int turn = 0;
    public float col1 = 0, col2 = 0, col3 = 0;
    public string player = "";
    public bool gameend = false;
    public int[] arr = new int[9];
    public int[] temparr = new int[9];
    public Button top, topr, topl, mid, midr, midl, bot, botr, botl;
    [SerializeField]
    private TMP_Text turndisplay;
    // Start is called before the first frame update void Start()
    void Start()
    {
        Button t = top.GetComponent<Button>();
        Button tr = topr.GetComponent<Button>();
        Button tl = topl.GetComponent<Button>();
        Button m = mid.GetComponent<Button>();
        Button mr = midr.GetComponent<Button>();
        Button ml = midl.GetComponent<Button>();
        Button b = bot.GetComponent<Button>();
        Button br = botr.GetComponent<Button>();
        Button bl = botl.GetComponent<Button>();
        int ran = Random.Range(1, 3);
        if (ran == 1)
        {
            player = "Plr1";
            turndisplay.text = "- Player 1 -";
        }
        else
        {
            player = "Plr2"; //Plr2
            turndisplay.text = "- Player 2 -";
            Invoke("AIMove", 1);
        }
        print("It's " + player + "'s turn");
    }
    public void Topbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(0, 3, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[1] = 1;
            Checkwin();
            top.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void TopRbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(3, 3, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[2] = 1;
            Checkwin();
            topr.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void TopLbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(-3, 3, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[0] = 1;
            Checkwin();
            topl.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void Midbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(0, 0, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[4] = 1;
            Checkwin();
            mid.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void MidRbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(3, 0, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[5] = 1;
            Checkwin();
            midr.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void MidLbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(-3, 0, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[3] = 1;
            Checkwin();
            midl.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void Botbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(0, -3, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[7] = 1;
            Checkwin();
            bot.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void BotRbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(3, -3, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[8] = 1;
            Checkwin();
            botr.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void BotLbutton()
    {
        if (player == "Plr1")
        {
            Instantiate(cirlce, new Vector3(-3, -3, 0), Quaternion.identity);
            player = "Plr2";
            turndisplay.text = "- Player 2 -";
            arr[6] = 1;
            Checkwin();
            botl.enabled = false;
            Invoke("AIMove", 1);
        }
    }
    public void Changecirclecolor()
    {
        float ran1 = Random.Range(0, 101);
        float ran2 = Random.Range(0, 101);
        float ran3 = Random.Range(0, 101);
        circlecolor.GetComponent<SpriteRenderer>().material.color = new Color(ran1/100, ran2/100, ran3/100);
        print(ran1/100 + " " + ran2/100 + " " + ran3/100);
        col1 = ran1/100;
        col2 = ran2/100;
        col3 = ran3/100;
        print(col1 + " " + col2 + " " + col3);
        cirlce.GetComponent<SpriteRenderer>().sharedMaterial.color = new Color(col1, col2, col3);
    }
    public int Checkwin()
    {
        turn++;
        for (int i = 0; i < 3; i++)
        {
            if (arr[i * 3] == arr[i * 3 + 1] && arr[i * 3 + 1] == arr[i * 3 + 2] && arr[i * 3] != 0 && turn <= 9)
            {
                Location(i, "horizontal");
                return arr[i * 3];
            }
            else if (arr[i] == arr[i + 3] && arr[i + 3] == arr[i + 6] && arr[i] != 0 && turn <= 9)
            {
                Location(i, "vertical");
                return arr[i];
            }
        }
        if (arr[0] == arr[4] && arr[4] == arr[8] && arr[0] != 0 && turn <= 9)
        {
            Location(0, "diagnal1");
            return arr[0];
        }
        else if (arr[2] == arr[4] && arr[4] == arr[6] && arr[2] != 0 && turn <= 9)
        {
            Location(2, "diagnal2");
            return arr[2];
        }
        return 0;
    }
    public void Location(int val1, string o)
    {
        if (o == "horizontal")
        {
            if (val1 == 0)
            {
                Instantiate(winline, new Vector3(0, 3, 0), Quaternion.identity);
            }
            else if (val1 == 1)
            {
                Instantiate(winline, new Vector3(0, 0, 0), Quaternion.identity);
            }
            else if (val1 == 2)
            {
                Instantiate(winline, new Vector3(0, -3, 0), Quaternion.identity);
            }
        }
        else if (o == "vertical")
        {
            if (val1 == 0)
            {
                Instantiate(winline2, new Vector3(-3, 0, 0), Quaternion.identity);
            }
            else if (val1 == 1)
            {
                Instantiate(winline2, new Vector3(0, 0, 0), Quaternion.identity);
            }
            else if (val1 == 2)
            {
                Instantiate(winline2, new Vector3(3, 0, 0), Quaternion.identity);
            }
        }
        else if (o == "diagnal1")
        {
            Instantiate(winline3, new Vector3(0, 0, 0), Quaternion.identity);
        }
        else if (o == "diagnal2")
        {
            Instantiate(winline4, new Vector3(0, 0, 0), Quaternion.identity);
        }
        if (arr[val1] == 1)
        {
            turndisplay.text = "- Player 1 Wins -";
        }
        else if (arr[val1] == -1)
        {
            turndisplay.text = "- Player 2 Wins -";
        }
        else if (turn == 9)
        {
            turndisplay.text = "- DRAW -";
        }
        gameend = true;
    }
    public void AIMove()
    {
        bool movecomplete = false;
        int tempval = 0;

        for (int i = 0; i < 3; i++)
        {
            if (arr[i * 3] == arr[i * 3 + 1] && (arr[i * 3 + 2] != -1 && arr[i * 3 + 2] != 1) && arr[i * 3] != 0 && arr[i * 3 + 1] != 0)// [1, 1, 0] HORIZONTAL
            {
                if (i * 3 + 2 == 2)
                {
                    Instantiate(square, new Vector3(3, 3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3 + 2] = -1;
                    topr.enabled = false;
                }
                else if (i * 3 + 2 == 5)
                {
                    Instantiate(square, new Vector3(3, 0, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3 + 2] = -1;
                    midr.enabled = false;
                }
                else if (i * 3 + 2 == 8)
                {
                    Instantiate(square, new Vector3(3, -3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3 + 2] = -1;
                    botr.enabled = false;
                }

                break;
            }
            else if (arr[i * 3] == arr[i * 3 + 2] && (arr[i * 3 + 1] != -1 && arr[i * 3 + 1] != 1) && arr[i * 3] != 0 && arr[i * 3 + 2] != 0) // [1, 0, 1] HORIZONTAL
            {
                if (i * 3 + 1 == 1)
                {
                    Instantiate(square, new Vector3(0, 3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3 + 1] = -1;
                    top.enabled = false;
                }
                else if (i * 3 + 1 == 4)
                {
                    Instantiate(square, new Vector3(0, 0, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3 + 1] = -1;
                    mid.enabled = false;
                }
                else if (i * 3 + 1 == 7)
                {
                    Instantiate(square, new Vector3(0, -3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3 + 1] = -1;
                    bot.enabled = false;
                }
                break;
            }
            else if (arr[i * 3 + 1] == arr[i * 3 + 2] && (arr[i * 3] != -1 && arr[i * 3] != 1) && arr[i * 3 + 1] != 0 && arr[i * 3 + 2] != 0) // [0, 1, 1] HORIZONTAL
            {
                if (i * 3 == 0)
                {
                    Instantiate(square, new Vector3(-3, 3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3] = -1;
                    topl.enabled = false;
                }
                else if (i * 3 == 3)
                {
                    Instantiate(square, new Vector3(-3, 0, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3] = -1;
                    midl.enabled = false;
                }
                else if (i * 3 == 6)
                {
                    Instantiate(square, new Vector3(-3, -3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i * 3] = -1;
                    botl.enabled = false;
                }
                break;
            }
            else if (arr[i] == arr[i + 3] && (arr[i + 6] != -1 && arr[i + 6] != 1) && arr[i] != 0 && arr[i + 3] != 0) // [1, 0, 0] [1, 0, 0] [0, 0, 0] Vertical
            {
                if (i + 6 == 6)
                {
                    Instantiate(square, new Vector3(-3, -3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i + 6] = -1;
                    botl.enabled = false;
                }
                else if (i + 6 == 7)
                {
                    Instantiate(square, new Vector3(0, -3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i + 6] = -1;
                    bot.enabled = false;
                }
                else if (i + 6 == 8)
                {
                    Instantiate(square, new Vector3(3, -3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i + 6] = -1;
                    botr.enabled = false;
                }
                break;
            }
            else if (arr[i + 6] == arr[i] && (arr[i + 3] != -1 && arr[i + 3] != 1) && arr[i + 6] != 0 && arr[i] != 0) // [1, 0, 0] [X, 0, 0] [1, 0, 0] Vertical
            {
                if (i + 3 == 3)
                {
                    Instantiate(square, new Vector3(-3, 0, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i + 3] = -1;
                    midl.enabled = false;
                }
                else if (i + 3 == 4)
                {
                    Instantiate(square, new Vector3(0, 0, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i + 3] = -1;
                    mid.enabled = false;
                }
                else if (i + 3 == 5)
                {
                    Instantiate(square, new Vector3(3, 0, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i + 3] = -1;
                    midr.enabled = false;
                }
                break;
            }
            else if (arr[i + 3] == arr[i + 6] && (arr[i] != -1 && arr[i] != 1) && arr[i + 3] != 0 && arr[i + 6] != 0) // [1, 0, 0] [X, 0, 0] [1, 0, 0] Vertical
            {
                if (i == 0)
                {
                    Instantiate(square, new Vector3(-3, 3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i] = -1;
                    topl.enabled = false;
                }
                else if (i == 1)
                {
                    Instantiate(square, new Vector3(0, 3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i] = -1;
                    top.enabled = false;
                }
                else if (i == 2)
                {
                    Instantiate(square, new Vector3(3, 3, 0), Quaternion.identity);
                    movecomplete = true;
                    arr[i] = -1;
                    topr.enabled = false;
                }
                break;
            }
            else if (arr[2] == arr[4] && (arr[6] != -1 && arr[6] != 1) && arr[2] != 0 && arr[4] != 0) // [0, 0, 1] [0, 1, 0] [X, 0, 0] Diagnal2
            {
                Instantiate(square, new Vector3(-3, -3, 0), Quaternion.identity);
                movecomplete = true;
                arr[6] = -1;
                botl.enabled = false;
                break;
            }
            else if (arr[4] == arr[6] && (arr[2] != -1 && arr[2] != 1) && arr[4] != 0 && arr[6] != 0) // [0, 0, X] [0, 1, 0] [1, 0, 0] Diagnal2
            {
                Instantiate(square, new Vector3(3, 3, 0), Quaternion.identity);
                movecomplete = true;
                arr[2] = -1;
                topr.enabled = false;
                break;
            }
            else if (arr[2] == arr[6] && (arr[4] != -1 && arr[4] != 1) && arr[2] != 0 && arr[6] != 0) // [0, 0, 1] [0, X, 0] [1, 0, 0] Diagnal2
            {
                Instantiate(square, new Vector3(0, 3, 0), Quaternion.identity);
                movecomplete = true;
                arr[4] = -1;
                mid.enabled = false;
                break;
            }
            else if (arr[0] == arr[4] && (arr[8] != -1 && arr[8] != 1) && arr[0] != 0 && arr[4] != 0) // [1, 0, 0] [0, 1, 0] [0, 0, X] Diagnal1
            {
                Instantiate(square, new Vector3(3, -3, 0), Quaternion.identity);
                movecomplete = true;
                arr[8] = -1;
                botr.enabled = false;
                break;
            }
            else if (arr[0] == arr[8] && (arr[4] != -1 && arr[4] != 1) && arr[0] != 0 && arr[8] != 0) // [1, 0, 0] [0, X, 0] [0, 0, 1] Diagnal1
            {
                Instantiate(square, new Vector3(0, 0, 0), Quaternion.identity);
                movecomplete = true;
                arr[4] = -1;
                mid.enabled = false;
                break;
            }
            else if (arr[4] == arr[8] && (arr[0] != -1 && arr[0] != 1) && arr[4] != 0 && arr[8] != 0) // [1, 0, 0] [0, X, 0] [0, 0, 1] Diagnal1
            {
                Instantiate(square, new Vector3(-3, 3, 0), Quaternion.identity);
                movecomplete = true;
                arr[0] = -1;
                topl.enabled = false;
                break;
            }
        }

        if (movecomplete == false && gameend == false)
        {
            for (int j = 0; j <= 8; j++)
            {
                if (arr[j] != -1 && arr[j] != 1)
                {
                    temparr[tempval] = j;
                    tempval++;
                }
            }
            int rando = Random.Range(0, tempval+1);
            print("The rando is " + rando + " while the temp(rando) is ");
            print("The rando is " + rando + " while the temp(rando) is " + temparr[rando]);
            //print(temparr[rando]);
            if (temparr[rando] == 0 && (arr[0] == -1 || arr[0] == 1))
            {
                Invoke("AIMove", 1);
            }
            else if (temparr[rando] == 0)
            {
                Instantiate(square, new Vector3(-3, 3, 0), Quaternion.identity);
                topl.enabled = false;
                arr[0] = -1;
            }
            else if (temparr[rando] == 1)
            {
                Instantiate(square, new Vector3(0, 3, 0), Quaternion.identity);
                top.enabled = false;
                arr[1] = -1;
            }
            else if (temparr[rando] == 2)
            {
                Instantiate(square, new Vector3(3, 3, 0), Quaternion.identity);
                topr.enabled = false;
                arr[2] = -1;
            }
            else if (temparr[rando] == 3)
            {
                Instantiate(square, new Vector3(-3, 0, 0), Quaternion.identity);
                midl.enabled = false;
                arr[3] = -1;
            }
            else if (temparr[rando] == 4)
            {
                Instantiate(square, new Vector3(0, 0, 0), Quaternion.identity);
                mid.enabled = false;
                arr[4] = -1;
            }
            else if (temparr[rando] == 5)
            {
                Instantiate(square, new Vector3(3, 0, 0), Quaternion.identity);
                midr.enabled = false;
                arr[5] = -1;
            }
            else if (temparr[rando] == 6)
            {
                Instantiate(square, new Vector3(-3, -3, 0), Quaternion.identity);
                botl.enabled = false;
                arr[6] = -1;
            }
            else if (temparr[rando] == 7)
            {
                Instantiate(square, new Vector3(0, -3, 0), Quaternion.identity);
                bot.enabled = false;
                arr[7] = -1;
            }
            else if (temparr[rando] == 8)
            {
                Instantiate(square, new Vector3(3, -3, 0), Quaternion.identity);
                botr.enabled = false;
                arr[8] = -1;
            }
        }
        //movecomplete = false;
        //tempval = 0;
        if (gameend == false)
        {
            turndisplay.text = "- Player 1 -";
            player = "Plr1";
            Checkwin();
        }
        
    }
    public void Restart()
    {
        GameObject[] circles = GameObject.FindGameObjectsWithTag("IsCircle");
        foreach (GameObject obj in circles)
        {
            Destroy(obj);
        }
        GameObject[] crosses = GameObject.FindGameObjectsWithTag("IsCross");
        foreach (GameObject obj2 in crosses)
        {
            Destroy(obj2);
        }
        for (int i = 0; i < 9; i++)
        {
            arr[i] = 0;
        }
        top.enabled = true;
        topr.enabled = true;
        topl.enabled = true;
        mid.enabled = true;
        midr.enabled = true;
        midl.enabled = true;
        bot.enabled = true;
        botr.enabled = true;
        botl.enabled = true;
        gameend = false;
        turn = 0;
        player = "Plr1";
        turndisplay.text = "- Player 1 -";
        print("It's " + player + "'s turn");
    }
}
